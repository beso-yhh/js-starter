{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../node_modules/.pnpm/@finsweet+ts-utils@0.40.0/node_modules/@finsweet/ts-utils/dist/webflow/getPublishDate.js", "../src/utils/greet.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/**\n * Extracts the publish date of a Webflow site\n * @returns A Date object, if found.\n * @param page The page to get the publish date from. Defaults to the current page.\n */\nexport const getPublishDate = (page = document) => {\n    const publishDatePrefix = 'Last Published:';\n    for (const node of page.childNodes) {\n        if (node.nodeType === Node.COMMENT_NODE && node.textContent?.includes(publishDatePrefix)) {\n            const publishDateValue = node.textContent.trim().split(publishDatePrefix)[1];\n            if (publishDateValue)\n                return new Date(publishDateValue);\n        }\n    }\n};\n", "import { getPublishDate } from '@finsweet/ts-utils';\n\n/**\n * Greets the user by printing a message in the console.\n * @param name The user's name.\n */\nexport const greetUser = (name: string) => {\n  const publishDate = getPublishDate();\n\n  console.log(`Hello ${name}!`);\n  console.log(\n    `This site was last published on ${publishDate?.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: '2-digit',\n    })}.`\n  );\n};\n", "import { greetUser } from '$utils/greet';\n\nimport type { Product } from './cms/populate-external-data/types';\nimport type { CMSList } from './types/CMSList';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(async () => {\n  const name = 'John Do wewewewe';\n  greetUser(name);\n  // document.body.style.backgroundColor = 'blue';\n});\n\n/**\n * Populate CMS Data from an external API.\n */\nwindow.fsAttributes = window.fsAttributes || [];\nwindow.fsAttributes.push([\n  'cmsload',\n  async (listInstances: CMSList[]) => {\n    console.log(`Hello from the CMS`);\n\n    // Get the list instance\n    const [listInstance] = listInstances;\n\n    // Save a copy of the template\n    const [firstItem] = listInstance.items;\n    const itemTemplateElement = firstItem.element;\n\n    // Fetch external data\n    const products = await fetchProducts();\n\n    // Remove existing items\n    listInstance.clearItems();\n\n    // Create the new items\n    const newItems = products.map((product) => createItem(product, itemTemplateElement));\n\n    // Populate the list\n    await listInstance.addItems(newItems);\n  },\n]);\n\n/**\n * Fetches fake products from Fake Store API.\n * @returns An array of {@link Product}.\n */\nconst fetchProducts = async (): Promise<Product[]> => {\n  try {\n    const response = await fetch('https://fakestoreapi.com/products');\n    const data: Product[] = await response.json();\n\n    return data;\n  } catch (error) {\n    return [];\n  }\n};\n\n/**\n * Creates an item from the template element.\n * @param product The product data to create the item from.\n * @param templateElement The template element.\n *\n * @returns A new Collection Item element.\n */\nconst createItem = (product: Product, templateElement: HTMLDivElement) => {\n  // Clone the template element\n  const newItem = templateElement.cloneNode(true) as HTMLDivElement;\n\n  // Query inner elements\n  // const image = newItem.querySelector<HTMLImageElement>('[data-element=\"image\"]');\n  const title = newItem.querySelector<HTMLHeadingElement>('[data-element=\"title\"]');\n  const category = newItem.querySelector<HTMLParagraphElement>('[data-element=\"category\"]');\n  const description = newItem.querySelector<HTMLParagraphElement>('[data-element=\"description\"]');\n\n  // Populate inner elements\n  // if (image) image.src = product.image;\n  if (title) title.textContent = product.title;\n  if (category) category.textContent = product.category;\n  if (description) description.textContent = product.description;\n\n  return newItem;\n};\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACKtF,MAAM,iBAAiB,CAAC,OAAO,aAAa;AAC/C,UAAM,oBAAoB;AAC1B,eAAW,QAAQ,KAAK,YAAY;AAChC,UAAI,KAAK,aAAa,KAAK,gBAAgB,KAAK,aAAa,SAAS,iBAAiB,GAAG;AACtF,cAAM,mBAAmB,KAAK,YAAY,KAAK,EAAE,MAAM,iBAAiB,EAAE,CAAC;AAC3E,YAAI;AACA,iBAAO,IAAI,KAAK,gBAAgB;AAAA,MACxC;AAAA,IACJ;AAAA,EACJ;;;ACRO,MAAM,YAAY,CAAC,SAAiB;AACzC,UAAM,cAAc,eAAe;AAEnC,YAAQ,IAAI,SAAS,IAAI,GAAG;AAC5B,YAAQ;AAAA,MACN,mCAAmC,aAAa,mBAAmB,SAAS;AAAA,QAC1E,MAAM;AAAA,QACN,OAAO;AAAA,QACP,KAAK;AAAA,MACP,CAAC,CAAC;AAAA,IACJ;AAAA,EACF;;;ACZA,SAAO,YAAY,CAAC;AACpB,SAAO,QAAQ,KAAK,YAAY;AAC9B,UAAM,OAAO;AACb,cAAU,IAAI;AAAA,EAEhB,CAAC;AAKD,SAAO,eAAe,OAAO,gBAAgB,CAAC;AAC9C,SAAO,aAAa,KAAK;AAAA,IACvB;AAAA,IACA,OAAO,kBAA6B;AAClC,cAAQ,IAAI,oBAAoB;AAGhC,YAAM,CAAC,YAAY,IAAI;AAGvB,YAAM,CAAC,SAAS,IAAI,aAAa;AACjC,YAAM,sBAAsB,UAAU;AAGtC,YAAM,WAAW,MAAM,cAAc;AAGrC,mBAAa,WAAW;AAGxB,YAAM,WAAW,SAAS,IAAI,CAAC,YAAY,WAAW,SAAS,mBAAmB,CAAC;AAGnF,YAAM,aAAa,SAAS,QAAQ;AAAA,IACtC;AAAA,EACF,CAAC;AAMD,MAAM,gBAAgB,YAAgC;AACpD,QAAI;AACF,YAAM,WAAW,MAAM,MAAM,mCAAmC;AAChE,YAAM,OAAkB,MAAM,SAAS,KAAK;AAE5C,aAAO;AAAA,IACT,SAAS,OAAO;AACd,aAAO,CAAC;AAAA,IACV;AAAA,EACF;AASA,MAAM,aAAa,CAAC,SAAkB,oBAAoC;AAExE,UAAM,UAAU,gBAAgB,UAAU,IAAI;AAI9C,UAAM,QAAQ,QAAQ,cAAkC,wBAAwB;AAChF,UAAM,WAAW,QAAQ,cAAoC,2BAA2B;AACxF,UAAM,cAAc,QAAQ,cAAoC,8BAA8B;AAI9F,QAAI;AAAO,YAAM,cAAc,QAAQ;AACvC,QAAI;AAAU,eAAS,cAAc,QAAQ;AAC7C,QAAI;AAAa,kBAAY,cAAc,QAAQ;AAEnD,WAAO;AAAA,EACT;",
  "names": []
}
